import { useEffect, useState } from 'react'
import type { NextPage } from 'next'
import Head from 'next/head'
import { Button, Input } from '~/shared/components'
import { globalStyles } from '~/shared/styles/reset'

const addApp = async (formData: any) => {
  return await fetch('/api/apps', {
    method: 'POST',
    headers: { 'Content-Type': 'application/json' },
    body: JSON.stringify(Object.fromEntries(formData)),
  }).then(x => x.json())
}

const handleFormSubmit = async (event: React.FormEvent<HTMLFormElement>) => {
  event.preventDefault()
  const formElement = document.querySelector('#form')
  const formData = new FormData(formElement as HTMLFormElement) as any
  try {
    const response = await addApp(formData)
    if (response.status === 200) {
      console.log('success')
    }
  } catch (error) {
    console.log('submission failure', error)
  }
}

const Form = ({
  handleFormSubmit,
}: {
  handleFormSubmit: (event: React.FormEvent<HTMLFormElement>) => Promise<void>
}) => (
  <form id="form" onSubmit={handleFormSubmit}>
    <div>
      <Input label="name" name="name" placeholder="name of application" />
    </div>
    <div>
      <Input label="type" name="type" placeholder="type of application" />
    </div>
    <div>
      <Input type="text" label="priority" name="priority" placeholder="priority of application" />
    </div>
    <div>
      <Input label="notes" name="notes" placeholder="notes of application" />
    </div>
    <Button>Add</Button>
    <Button status="loading">loading</Button>
    <Button status="disabled">disabled</Button>
    <Button status="error">error</Button>
  </form>
)

const Home: NextPage = () => {
  const [apps, setApps] = useState([])
  globalStyles()

  const getApps = async () => {
    try {
      const appsResponse = await fetch('/api/apps', {
        method: 'GET',
        headers: { 'Content-Type': 'application/json' },
      }).then(x => x.json())

      setApps(appsResponse.data)
    } catch (error) {
      console.log('could not get apps')
    }
  }

  useEffect(() => {
    getApps()
  }, [])

  return (
    <div>
      <Head>
        <title>Create Next App</title>
        <meta name="description" content="Generated by create next app" />
        <link rel="icon" href="/favicon.ico" />
      </Head>

      <h1>Apps to build</h1>
      {apps.map(({ name, type, priority, notes }) => (
        <div>name: {name}</div>
      ))}
      <br />
      <br />
      <br />
      <br />
      <Form handleFormSubmit={handleFormSubmit} />
    </div>
  )
}

export default Home
